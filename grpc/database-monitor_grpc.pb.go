// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/database-monitor.proto

package DatabaseMonitor

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatabaseMonitorClient is the client API for DatabaseMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseMonitorClient interface {
	// Increasing the number of Items, when endpoint is called
	UpdateProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePeople(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateParticipantsToProject(ctx context.Context, in *CountToProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdatePostsToProject(ctx context.Context, in *CountToProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateSocials(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Status of Projects
	NewProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
	ActiveProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
	FinishedProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type databaseMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseMonitorClient(cc grpc.ClientConnInterface) DatabaseMonitorClient {
	return &databaseMonitorClient{cc}
}

func (c *databaseMonitorClient) UpdateProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/UpdateProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) UpdatePeople(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/UpdatePeople", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) UpdateParticipantsToProject(ctx context.Context, in *CountToProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/UpdateParticipantsToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) UpdatePostsToProject(ctx context.Context, in *CountToProjectRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/UpdatePostsToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) UpdateSocials(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/UpdateSocials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) NewProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/NewProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) ActiveProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/ActiveProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseMonitorClient) FinishedProjects(ctx context.Context, in *UpdateCountReqest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DatabaseMonitor/FinishedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseMonitorServer is the server API for DatabaseMonitor service.
// All implementations must embed UnimplementedDatabaseMonitorServer
// for forward compatibility
type DatabaseMonitorServer interface {
	// Increasing the number of Items, when endpoint is called
	UpdateProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	UpdatePeople(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	UpdateParticipantsToProject(context.Context, *CountToProjectRequest) (*empty.Empty, error)
	UpdatePostsToProject(context.Context, *CountToProjectRequest) (*empty.Empty, error)
	UpdateSocials(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	// Status of Projects
	NewProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	ActiveProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	FinishedProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error)
	mustEmbedUnimplementedDatabaseMonitorServer()
}

// UnimplementedDatabaseMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedDatabaseMonitorServer struct {
}

func (UnimplementedDatabaseMonitorServer) UpdateProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjects not implemented")
}
func (UnimplementedDatabaseMonitorServer) UpdatePeople(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePeople not implemented")
}
func (UnimplementedDatabaseMonitorServer) UpdateParticipantsToProject(context.Context, *CountToProjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParticipantsToProject not implemented")
}
func (UnimplementedDatabaseMonitorServer) UpdatePostsToProject(context.Context, *CountToProjectRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePostsToProject not implemented")
}
func (UnimplementedDatabaseMonitorServer) UpdateSocials(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSocials not implemented")
}
func (UnimplementedDatabaseMonitorServer) NewProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewProjects not implemented")
}
func (UnimplementedDatabaseMonitorServer) ActiveProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveProjects not implemented")
}
func (UnimplementedDatabaseMonitorServer) FinishedProjects(context.Context, *UpdateCountReqest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishedProjects not implemented")
}
func (UnimplementedDatabaseMonitorServer) mustEmbedUnimplementedDatabaseMonitorServer() {}

// UnsafeDatabaseMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseMonitorServer will
// result in compilation errors.
type UnsafeDatabaseMonitorServer interface {
	mustEmbedUnimplementedDatabaseMonitorServer()
}

func RegisterDatabaseMonitorServer(s grpc.ServiceRegistrar, srv DatabaseMonitorServer) {
	s.RegisterService(&DatabaseMonitor_ServiceDesc, srv)
}

func _DatabaseMonitor_UpdateProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).UpdateProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/UpdateProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).UpdateProjects(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_UpdatePeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).UpdatePeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/UpdatePeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).UpdatePeople(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_UpdateParticipantsToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).UpdateParticipantsToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/UpdateParticipantsToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).UpdateParticipantsToProject(ctx, req.(*CountToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_UpdatePostsToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).UpdatePostsToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/UpdatePostsToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).UpdatePostsToProject(ctx, req.(*CountToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_UpdateSocials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).UpdateSocials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/UpdateSocials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).UpdateSocials(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_NewProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).NewProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/NewProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).NewProjects(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_ActiveProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).ActiveProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/ActiveProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).ActiveProjects(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseMonitor_FinishedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseMonitorServer).FinishedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DatabaseMonitor/FinishedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseMonitorServer).FinishedProjects(ctx, req.(*UpdateCountReqest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseMonitor_ServiceDesc is the grpc.ServiceDesc for DatabaseMonitor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseMonitor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DatabaseMonitor",
	HandlerType: (*DatabaseMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProjects",
			Handler:    _DatabaseMonitor_UpdateProjects_Handler,
		},
		{
			MethodName: "UpdatePeople",
			Handler:    _DatabaseMonitor_UpdatePeople_Handler,
		},
		{
			MethodName: "UpdateParticipantsToProject",
			Handler:    _DatabaseMonitor_UpdateParticipantsToProject_Handler,
		},
		{
			MethodName: "UpdatePostsToProject",
			Handler:    _DatabaseMonitor_UpdatePostsToProject_Handler,
		},
		{
			MethodName: "UpdateSocials",
			Handler:    _DatabaseMonitor_UpdateSocials_Handler,
		},
		{
			MethodName: "NewProjects",
			Handler:    _DatabaseMonitor_NewProjects_Handler,
		},
		{
			MethodName: "ActiveProjects",
			Handler:    _DatabaseMonitor_ActiveProjects_Handler,
		},
		{
			MethodName: "FinishedProjects",
			Handler:    _DatabaseMonitor_FinishedProjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/database-monitor.proto",
}
